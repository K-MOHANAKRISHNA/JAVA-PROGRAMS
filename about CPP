// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


map<int,int> mapInsert(int arr[],int n);
void mapDisplay(map<int,int>mp);
void mapErase(map<int,int>&mp,int x);


 // } Driver Code Ends
//User function Template for C++


map<int,int> mapInsert(int arr[],int n)
{
    map<int,int>mp;
   //Insert arr[i] as key and i as value
    for(int i=0;i<n;i++){
        mp[arr[i]]=i;
    }
    
    return mp;
    
}


void mapDisplay(map<int,int>mp)
{
    //Print every key and value pair in a new line
    for(auto it:mp){
        cout<<it.first<<" "<<it.second<<"\n";
    }
}


void mapErase(map<int,int>&mp,int x)
{
   //Write the if and else condition to erase x from map
   auto it=mp.find(x);
   if(it!=mp.end()){
       mp.erase(it);
   
    cout<<"erased "<<x;
   }
    
    //else condition
    else
    {
    cout<<"not found";
    
    }
    cout<<endl;
}

// { Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        int arr[n]; 
        for(int i=0;i<n;i++)
            cin>>arr[i]; //Taking input array
        
        map<int,int>mp=mapInsert(arr,n); //map insert function that returns a function
        mapDisplay(mp); //print the keys and values of the map
        int x;
        cin>>x; //element to be erased
        
        mapErase(mp,x); //the erase function
        mapDisplay(mp);
        
        
    }
	return 0;
}
  // } Driver Code Ends





//nearest fibbonaci cpp approach code failed

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int i1=0,i2=1,fib1=0,fib2,n,temp=0;
    cin>>n;
    for(int i=1;i<n;i++)
    {
        temp=fib1;
        fib1=i1+i2;
        i1=i2;
        i2=fib1;
        fib2=i1+i2;
        if(fib1>n)
        {
            if((temp+fib1)/2==n)
            {
                cout<<fib1<<" "<<fib2;
                break;
            }
            else
            {
            cout<<temp;
            break;
            }
        }
        
    }
}
